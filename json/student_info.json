   [
      ~[x:GetDoThisForStudents]
      ~[x:SortSelection;Students:~[displayprefschool:report_card_sort]]
      ~[RepeatForEach:Students]
      {
         ~[tlist_sql;
         select
            s.id,
            s.first_name,
            s.middle_name,
            s.last_name,
            scf.PSCore_Legal_First_Name,
            scf.PSCore_Legal_Middle_Name,
            scf.PSCore_Legal_Last_Name,
            s.schoolid,
            s.grade_level,
            s.home_room,
            s.student_number,
            to_char(s.dob, 'mm/dd/yyyy') dob,
            case when s.gender='F' then 1 else 0 end as female,
            case when s.gender='M' then 1 else 0 end as male,
            case when s.gender='U' then 1 else 0 end as undisclosed,
            case when s.gender='X' then 1 else 0 end as nonbinary,
            (s.street || ', '|| s.city || ', ' || s.state || ', ' || s.zip) home_address,
            s.home_phone,
            pei.pei_altaddress1addresstype,
            pei.pei_altaddress1label,
            case when pei.pei_altaddress1apt is null then '' else (pei.pei_altaddress1apt || '-') end alt1apartment,
            case when pei.pei_altaddress1streetname is null then '' else (pei.pei_altaddress1streetnum || ' ' || pei.pei_altaddress1streetname || ', ' || nvl(pei.pei_altaddress1municipality, s.city) || ', PE  ' || pei.pei_altaddress1postalcode) end alt1address,
            pei.pei_altaddress2addresstype,
            pei.pei_altaddress2label,
            case when pei.pei_altaddress2apt is null then '' else (pei.pei_altaddress2apt || '-') end alt2apartment,
            case when pei.pei_altaddress2streetname is null then '' else (pei.pei_altaddress2streetnum || ' ' || pei.pei_altaddress2streetname || ', ' || nvl(pei.pei_altaddress2municipality, s.city) || ', PE  ' || pei.pei_altaddress2postalcode) end alt2address,
            CASE 
               when scf.allergies = 'EPIY' then 'Yes'
               when scf.allergies = 'EPIN' then 'Yes'
               else 'No'
            end as life_threatening_allergy,
            CASE
               when scf.allergies = 'EPIY' then 'Yes'
               else 'No'
            end as epipen,
            CAST(s.alert_medical as varchar2(4000)) alert_medical,
            scf.medical_considerations,
            case def.pei_indigenous
               when 'A' then 'Indigenous Person - no detail'
               when 'F' then 'First Nations - living off reserve'
               when 'I' then 'Inuk (Inuit)'
               when 'M' then 'MÃ©tis'
               when 'R' then 'First Nations, living on reserve'
            else 'Does not identify as indigenous' end as indigenous,
            case scf.guardianship
               when 'M' then 'Mother'
               when 'F' then 'Father'
               when 'LG' then 'Guardian'
               when 'H' then 'Host'
               when 'PT' then 'Parents Together'
               when 'PS' then 'Parents Separately'
               when 'I' then 'Independent'
            end as guardianship,
            def.pei_hasinternet,
            def.pei_hasdevice
         from students s
         left join studentcorefields scf
            on scf.studentsdcid = s.dcid
         left join u_def_ext_students def
            on def.studentsdcid = s.dcid
         left join u_pei_transportation pei
            on pei.studentsdcid = s.dcid
         where s.id = ~(curstudid)
         ~[if.is.a.school]and s.schoolid = ~(curschoolid)[/if];
         ]
         "id": ~(1;l),
         "first_name": "~(2;json)",
         "middle_name": "~(3;json)",
         "last_name": "~(4;json)",
         "legal_first_name": "~(5;json)",
         "legal_middle_name": "~(6;json)",
         "legal_last_name": "~(7;json)",
         "schoolid": ~(8;l),
         "grade_level": ~(9;l),
         "home_room": "~(10;json)",
         "student_number": ~(11;l),
         "dob": "~(12)",
         "genderF": ~(F;l),
         "genderM": ~(M;l),
         "genderU": ~(U;l),
         "genderX": ~(X;l),
         "home_address": "~(14;json)",
         "home_phone": "~(15;json)",
         "alt_address1_type": "~(16;json)",
         "alt_address1_label": "~(17;json)",
         "alt_address1": "~(18;json)~(19;json)",
         "alt_address2_type": "~(20;json)",
         "alt_address2_label": "~(21;json)",
         "alt_address2": "~(22;json)~(23;json)",
         "life_threatening_allergy": "~(24;json)",
         "epipen": "~(25;json)",
         "alert_medical": "~(26;json)",
         "medical_considerations": "~(27;json)",
         "indigenous": "~(28;json)",
         "guardianship": "~(30;json)",
         "has_internet": "~(31;json)",
         "has_device": "~(32;json)",
         [/tlist_sql]
         "contacts": [
            ~[tlist_sql;
            select
               p.id,
               sca.contactpriorityorder,
               cs.code,
               p.lastname,
               p.firstname,
               scd.ISCUSTODIAL,
               scd.LIVESWITHFLG,
               scd.SCHOOLPICKUPFLG,
               scd.ISEMERGENCY,
               scd.RECEIVESMAILFLG,
               case when gs.guardianstudentid is not null then 1 else 0 end allowDataAccess,
               (select listagg(email.emailaddress, ', ') within group (order by email.emailaddress)
                  from personemailaddressassoc pe
                  join emailaddress email
                     on pe.emailaddressid = email.emailaddressid
                  where pe.personid = p.id) as emails
            from students s
            left join studentcontactassoc sca
               on s.dcid = sca.studentdcid
            left join codeset cs
               on cs.codesetid = sca.CURRRELTYPECODESETID
            left join studentcontactdetail scd
               on sca.STUDENTCONTACTASSOCID = scd.STUDENTCONTACTASSOCID
            left join person p
               on sca.personid = p.id
            left join guardianpersonassoc gpa
               on gpa.personid = p.id
            left join guardian g
               on g.guardianid = gpa.guardianid
            left join guardianstudent gs
               on gs.guardianid = g.guardianid
               and gs.studentsdcid = s.dcid
            where
               s.id = ~(curstudid)
               ~[if.is.a.school]and s.schoolid = ~(curschoolid)[/if]
               and p.isactive = 1
               and scd.isactive = 1
            order by s.id, sca.contactpriorityorder
            ]
            {
               "id": ~(0;l),
               "priority": ~(1;l),
               "relationship": "~(2;json)",
               "last_name": "~(3;json)",
               "first_name": "~(4;json)",
               "is_custodial": ~(5;l),
               "lives_with": ~(6;l),
               "school_pickup": ~(7;l),
               "is_emergency": ~(8;l),
               "receives_mail": ~(9;l),
               "allow_data_access": ~(10;l),
               "emails": "~(emails;json)",
               "phone_numbers": []
            },
            [/tlist_sql]
            {}
         ],
         "phone_numbers": [
         ~[tlist_sql;
            select
               p.id,
               phone.ispreferred,
               phone.PHONENUMBERASENTERED,
               phone.PHONENUMBERPRIORITYORDER,
               cs.code
            from students s
            left join studentcontactassoc sca
               on s.dcid = sca.studentdcid
            left join person p
               on sca.personid = p.id
            join personphonenumberassoc phone
               on p.id = phone.personid
            left join codeset cs
               on cs.codesetid = phone.PHONETYPECODESETID
            left join studentcontactdetail scd
               on sca.STUDENTCONTACTASSOCID = scd.STUDENTCONTACTASSOCID
            where 
               s.id = ~(curstudid)
               ~[if.is.a.school]and s.schoolid = ~(curschoolid)[/if]
               and p.isactive = 1
               and scd.isactive = 1
            order by s.id, p.id,phone.PHONENUMBERPRIORITYORDER;]
            {
               "person_id": ~(1;l),
               "is_preferred": ~(2;l),
               "number": "~(3;json)",
               "priority": ~(4;l),
               "type": "~(5;json)"
            },
            [/tlist_sql]
            {}
         ]
      }
   [between:Students],
   [/RepeatForEach:Students] 
]