[
   ~[x:GetDoThisForStudents]
   ~[x:SortSelection;Students:~[displayprefschool:report_card_sort]]
   ~[RepeatForEach:Students]
   {
   ~[tlist_sql;
      select
         s.id sid,
         s.schoolid schoolid,
         sch.name school,
         sch.principal,
         s.student_number,
         s.home_room,
         case
            when u.pei_uselegal = 1 then (scf.pscore_legal_first_name || ' ' || scf.pscore_legal_last_name) 
            else (s.first_name || ' ' || s.last_name) 
            end
         as student_name,
         to_char(s.dob, 'mm/dd/yyyy') dob,
         s.grade_level
      from students s
      join schools sch
         on sch.school_number = s.schoolid
      left join u_def_ext_students u
         on u.studentsdcid = s.dcid
      left join studentcorefields scf 
         on scf.studentsdcid = s.dcid
      where s.id = ~(curstudid)
      ~[if.is.a.school]and s.schoolid = ~(curschoolid)[/if]
      order by sid;]
         "sid":            "~(sid)",
         "schoolid":       "~(schoolid)",
         "school":         "~(school;json)",
         "principal":      "~(principaljson)",
         "student_number": "~(student_number)",
         "home_room":      "~(home_room)",
         "student_name":   "~(student_name;json)",
         "dob":            "~(dob)",
         "grade_level":    "~(grade_level)",
      [/tlist_sql]
         "semCourses": [
      ~[tlist_sql;
        with currentcourses as (select
         cc.sectionid,
            sg.course_name,
            sg.course_number,
            case substr(sg.course_number,5,1)
               when '0' then 'Open'
               when '1' then 'Advanced'
               when '2' then 'Academic'
               when '3' then 'General'
               when '4' then 'Vocational'
               when '5' then 'Vocational'
               when '6' then 'Modified'
               when '7' then 'Intervention' 
               when 'H' then 'IB'
               when 'S' then 'IB' 
            end as course_level,
            sg.absences,
            sg.tardies,
            sg.comment_value
      from students s
      join cc 
         on cc.studentid = s.id
      join storedgrades sg
         on sg.studentid = cc.studentid 
         and sg.sectionid = cc.sectionid
      join courses c
         on c.course_number = cc.course_number
      where 
         s.id = ~(curstudid)
         and sg.termid = ~(gpv.termid)
         and sg.storecode IN (~(gpv.storecode))
         and nvl(c.sched_do_not_print,0) = 0
         and nvl(sg.excludefromtranscripts,0) = 0
      order by 1),
      coursegrades as (select
            sg.course_number,
            sg.storecode,
            sg.grade
         from storedgrades sg
         join courses c
            on c.course_number = sg.course_number
         where sg.studentid = ~(curstudid)
         and sg.termid = ~(gpv.termid)
         and nvl(c.sched_do_not_print,0) = 0
         and nvl(sg.excludefromtranscripts,0) = 0
         order by 1),
         gradespivot as (select *
         from coursegrades
         PIVOT (
         MAX ( grade )
         FOR storecode
         IN ( 'Q1' Q1, 'S1' S1, 'Q3' Q3, 'S2' S2 ))
         order by course_number)
         select 
            ci.sectionid,
            ci.course_name,
            ci.course_number,
            ci.course_level,
            ci.absences,
            ci.tardies,
            substr(ci.comment_value,0,400) comment_value,
            cg.q1,
            cg.s1,
            cg.q3,
            cg.s2,
            ~[if.~(gpv.coteachers)=true](SELECT
            LISTAGG(t.first_name || ' ' || t.last_name, ', ') within group (order by st.roleid, st.start_date) as "Co-Teachers"
            FROM
               sectionteacher st
            JOIN teachers t
               ON st.teacherid = t.id
            where
               st.roleid IN (41,42)
               and st.sectionid = ci.sectionid)
            [else](tea.first_name || ' ' || tea.last_name)[/if] as teacher_names
         from currentcourses ci
         join gradespivot cg
            on ci.course_number = cg.course_number
         join sections sec
            on sec.id = ci.sectionid
         join teachers tea
            on tea.id = sec.teacher
         order by 1;]
         {
            "sectionid":"~(ci.sectionid)",
            "course_name":"~(ci.course_name;json)",
            "course_number":"~(ci.course_number;json)",
            "level":"~(ci.course_level)",
            "abs":"~(ci.absences)",
            "lates":"~(ci.tardies)",
            "comment":"~(ci.comment_value;json)",
            "q1":"~(cg.q1)",
            "s1":"~(cg.s1)",
            "q3":"~(cg.q3)",
            "s2":"~(cg.s2)",
            "teachers":"~(teacher_names;json)"
         },
         [/tlist_sql]
         {}],
         "fyCourses":[
         ~[tlist_sql;
         with currentcourses as (select
            cc.sectionid,
            sg.course_name,
            sg.course_number,
            case substr(sg.course_number,5,1)
               when '0' then 'Open'
               when '1' then 'Advanced'
               when '2' then 'Academic'
               when '3' then 'General'
               when '4' then 'Vocational'
               when '5' then 'Vocational'
               when '6' then 'Modified'
               when '7' then 'Intervention' 
               when 'H' then 'IB'
               when 'S' then 'IB' 
            end as course_level,
            sg.absences,
            sg.tardies,
            sg.comment_value
      from students s
      join cc 
         on cc.studentid = s.id
      join storedgrades sg
         on sg.studentid = cc.studentid 
         and sg.sectionid = cc.sectionid
      join courses c
         on c.course_number = cc.course_number
      where 
         s.id = ~(curstudid)
         and sg.termid = ~(curyearid) * 100
         and sg.storecode IN (~(gpv.storecode))
         and nvl(c.sched_do_not_print,0) = 0
         and nvl(sg.excludefromtranscripts,0) = 0
      order by 1),
      coursegrades as (select
            sg.course_number,
            sg.storecode,
            sg.grade
         from storedgrades sg
         join courses c
            on c.course_number = sg.course_number
         where sg.studentid = ~(curstudid)
         and sg.termid = ~(curyearid) * 100
         and nvl(c.sched_do_not_print,0) = 0
         and nvl(sg.excludefromtranscripts,0) = 0
         order by 1),
        gradespivot as(select 
        	*
         from coursegrades
         PIVOT (
         MAX ( grade )
         FOR storecode
         IN ( 'Q1' Q1, 'Q2' Q2, 'Q3' Q3, 'Q4' Q4 ))
         order by 1)
         
          select 
            ci.sectionid,
            ci.course_name,
            ci.course_number,
            ci.course_level,
            ci.absences,
            ci.tardies,
            substr(ci.comment_value,0,415) comment_value,
            cg.q1,
            cg.q2,
            cg.q3,
            cg.q4,
            ~[if.~(gpv.coteachers)=true](SELECT
            LISTAGG(t.first_name || ' ' || t.last_name, ', ') within group (order by st.roleid, st.start_date) as "Co-Teachers"
            FROM
               sectionteacher st
            JOIN teachers t
               ON st.teacherid = t.id
            where
               st.roleid IN (41,42)
               and st.sectionid = ci.sectionid)
            [else](tea.first_name || ' ' || tea.last_name)[/if] as teacher_names
         from currentcourses ci
         join gradespivot cg
            on ci.course_number = cg.course_number
         join sections sec
            on sec.id = ci.sectionid
         join teachers tea
            on tea.id = sec.teacher
         order by 1;]
            {
              "sectionid":"~(ci.sectionid)",
               "course_name":"~(ci.course_name;json)",
               "course_number":"~(ci.course_number)",
               "level":"~(ci.course_level)",
               "abs":"~(ci.absences)",
               "lates":"~(ci.tardies)",
               "comment":"~(ci.comment_value;json)",
               "q1":"~(cg.q1)",
               "q2":"~(cg.q2)",
               "q3":"~(cg.q3)",
               "q4":"~(cg.q4)",
               "teachers":"~(teacher_names;json)"
            },
            [/tlist_sql]
            {}],
         "transcript": [
            ~[tlist_sql;
            select
                  to_char(t.lastday,'yyyy/mm') date_earned,
                  sg.course_number,
                  sg.course_name,
                  sg.grade,
                  round(nvl(sg.earnedcrhrs,0),2) earnedcrhrs,
                  sg.potentialcrhrs,
                  nvl(sg.credit_type,'ZZ') credit_type
               from students s
               join storedgrades sg
                  on sg.studentid = s.id
               join terms t
                  on t.id = sg.termid
                  and t.schoolid = sg.schoolid
               join courses c
                  on sg.course_number = c.course_number
               where
                  s.id = ~(curstudid)
                 ~[if.is.a.school]and s.schoolid = ~(curschoolid)[/if]
                  and sg.storecode = 'F1'
                  and nvl(c.sched_do_not_print,0) = 0
                  and nvl(sg.excludefromtranscripts,0) = 0                 
               order by sg.credit_type ASC, date_earned ASC;
            ]
            {
                  "lastday":"~(1)",
                  "courseNumber":"~(2)",
                  "courseName":"~(3;json)",
                  "grade":"~(4)",
                  "credits":"~(5)",
                  "maxCredits":"~(6)",
                  "creditType":"~(7)"
            },
            [/tlist_sql]
            {}   
         ],
         ~[tlist_sql;
           select
              sum(sg.earnedcrhrs) credithours
           from students s
           join storedgrades sg
              on sg.studentid = s.id
           join courses c
              on sg.course_number = c.course_number
           where
              s.id = ~(curstudid)
              ~[if.is.a.school]and s.schoolid = ~(curschoolid)[/if]
              and sg.storecode = 'F1'
              and nvl(c.sched_do_not_print,0) = 0
              and nvl(sg.excludefromtranscripts,0) = 0 
            order by 1;]
            "creditHours": "~(1)"
            [/tlist_sql]
   }
   [between:Students],
   [/RepeatForEach:Students] 
]